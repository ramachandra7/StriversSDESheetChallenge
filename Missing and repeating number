##BRUTE:
TC: O(N*2)


##better:
hashing
TC: O(N) SC: O(N)


TC: O(N)
SC: O(1)


##Optimal using maths:


#include <bits/stdc++.h>

pair<int,int> missingAndRepeating(vector<int> &arr, int n)
{
	// Write your code here \
	// s - sn = x - y
	// s2 - s2n =  x2 - y2

long long int i,s=0,s2=0,sn=0,s2n=0,val1,val2;

	for(i=0;i<n;i++){
		s+=arr[i];
		s2+=((long long)arr[i]* (long long)arr[i]);
		sn+=(i+1);
		s2n+=(i+1)*(i+1);
	}
	val1=s-sn;
	val2=s2-s2n;
	val2/=val1;
int x=(int)(val1+val2)/2;
	return {x-val1,x};


	
}



##Optimal using xor:

#include <bits/stdc++.h>

pair<int,int> missingAndRepeating(vector<int> &arr, int n)
{
	// Write your code here
	int ex=0,i,bit,one,zero; 
	for(i=0;i<n;i++)
	{
		ex=ex^arr[i];
		ex=ex^(i+1);
	}

	bit=0;

	// number with set bit from right side of ex

    int number = (ex & ~(ex - 1));

 	zero=0,one=0;
	for (i = 0; i < n; i++) {
		if((number & arr[i])!=0 ){
			one=one^arr[i];
		}
		else{
			zero=zero^arr[i];
		}
		if((number & (i+1))!=0 ){
			one=one^(i+1);
                } else {
                  zero = zero ^ (i + 1);
                }
        }
	int c=0;
	for(i=0;i<n;i++)
	{
		if(arr[i]==zero)
		c++;
	}
	if(c==2)
		return {one,zero};
        return {zero,one};
}


