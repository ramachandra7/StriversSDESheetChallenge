##maximum subarray sum

##brute: 3 loops
O(n*3)

##better: 2 loops
O(n*2)

##Optimal:
SC: O(1)
TC: O(N)

#include <bits/stdc++.h> 
long long maxSubarraySum(int arr[], int n)
{
    /*
        Don't write main().
        Don't read input, it is passed as function argument.    
        No need to print anything.
        Taking input and printing output is handled automatically.
    */
   long long  int maxSum=0,i,sum=0;
    for(i=0;i<n;i++)
    {
        sum=sum+arr[i];
        maxSum=max(maxSum,sum);
        if(sum<0)
        sum=0;
    }
    return maxSum;
}


##print subarray

#include <bits/stdc++.h> 
long long maxSubarraySum(int arr[], int n)
{
    /*
        Don't write main().
        Don't read input, it is passed as function argument.    
        No need to print anything.
        Taking input and printing output is handled automatically.
    */
   long long  int maxSum=0,i,sum=0,start=0,end=0;
    for(i=0;i<n;i++)
    {
        // if sum==0, that means you are starting from that index. so start=i;

        if(sum==0)start=i;
        sum=sum+arr[i];
        // maxSum=max(maxSum,sum);
        if(sum>maxSum)
        {
            maxSum=sum;
        // if(sum>maxi) you are considering that index so end=i
            end=i;
        }
        if (sum < 0) {
          sum = 0;
        }
    }
    return maxSum;
}
