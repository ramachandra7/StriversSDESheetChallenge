##Brute:
TC: O(NlogN)+ O(2n)
SC: O(1)


##Optimal:
TC: O(Nlogn) +O(N)
    sorting+ traversal
SC: O(1)

#include <bits/stdc++.h> 
/*

    intervals[i][0] = start point of i'th interval
    intervals[i][1] = finish point of i'th interval

*/

vector<vector<int>> mergeIntervals(vector<vector<int>> &intervals)
{
    // Write your code here.
    sort(intervals.begin(),intervals.end());
    int i,x;
    vector<vector<int>> ans;
    ans.push_back(intervals[0]);
    for(i=1;i<intervals.size();i++)
    {
        auto last=ans[ans.size()-1];
        x=intervals[i][0];
        if(x>=last[0] && x<=last[1])
        {
            ans.pop_back();
            ans.push_back({last[0],max(last[1],intervals[i][1])
            });
        }
        else{
            ans.push_back(intervals[i]);
        }
    }
    return ans;
}
