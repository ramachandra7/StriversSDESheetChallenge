##BRUTE:
with extra space. take extra array with length m+n

compare 1st elements and add min element into res.  Later add all remaining elements of the left array into res.

TC: O(m+n){traversal} + O(m+n){assign again}
SC: O(m+n)



##BETTER: without extra space

TC: (M+N)log(M+N)
	add all elements into 1 array and sort
SC: O(1)

#include <bits/stdc++.h>

vector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {

	int i,j;
	j=0;
	for(i=m;j<n;i++)
	{
		arr1[i]=arr2[j];
		j++;
	}
	sort(arr1.begin(),arr1.end());
	return arr1;
}



##OPTIMAL:

TC: O(NlogN)+ O(MlogM) + O(min(M,N)) {To move elements to respective array}
SC: O(1)

compare arr1 last value to arr2 first value and so on respectively. Idea is to have all first m elements in arr1 and next n elementts in arr2

#include <bits/stdc++.h>

vector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {
	// Write your code here.
	
	int right=m-1,left=0,i,j;
	
	while(right>=0 && left<n){
          if (arr1[right] > arr2[left]) {
            swap(arr1[right],arr2[left]);
          }
			right--;
			left++;
        }

	sort(arr1.begin(),arr1.begin()+m);
	sort(arr2.begin(),arr2.end());
j=0;

	for(i=m;i<m+n;i++)
	{
		arr1[i]=arr2[j];
		j++;
	}	
	
	return arr1;
	
}


## OPTIMAL 2 :

GAP method
